{"version":3,"sources":["constants.tsx","actions.tsx","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundry.tsx","components/Header.tsx","components/MainPage.tsx","containers/App.tsx","serviceWorker.ts","reducers.tsx","index.tsx"],"names":["Constants","Card","email","name","id","className","src","alt","CardList","robots","map","user","i","key","React","memo","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","MainPage","useState","filteredRobots","setFilteredRobots","searchField","onSearchChange","onRequestRobots","isPending","a","length","console","log","useEffect","componentDidMount","filter","robot","toLowerCase","includes","filterRobots","connect","searchRobots","requestRobots","error","dispatch","event","text","currentTarget","value","CHANGE_SEARCH_FIELD","payload","REQUEST_ROBOTS_PENDING","fetch","then","response","json","data","REQUEST_ROBOTS_SUCCESS","catch","REQUEST_ROBOTS_FAILED","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","logger","createLogger","store","createStore","combineReducers","action","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0653e5cd.chunk.js","sourcesContent":["export enum Constants {\r\n  CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\",\r\n  REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\",\r\n  REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\",\r\n  REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\",\r\n}\r\n","import { Constants } from \"./constants\";\r\nimport { Dispatch } from \"redux\";\r\nimport { RobotsAction } from \"./types\";\r\n\r\nexport const setSearchField = (text: string) => ({\r\n  type: Constants.CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = (): any => async (\r\n  dispatch: Dispatch<RobotsAction>\r\n) => {\r\n  dispatch({ type: Constants.REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      dispatch({\r\n        type: Constants.REQUEST_ROBOTS_SUCCESS,\r\n        payload: data,\r\n      });\r\n    })\r\n    .catch((error) =>\r\n      dispatch({ type: Constants.REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface Card {\r\n  email: string;\r\n  name: string;\r\n  id: number;\r\n}\r\n\r\nconst Card = ({ email, name, id }: Card) => {\r\n  //tc=text center, dib=div, br=border, pa=padding, ma=margin, br=border radius\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport { IRobot } from \"../types\";\r\n\r\nconst CardList = ({ robots }: { robots: Array<IRobot> }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\ninterface ISearchBoxProps {\r\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\r\n}\r\n\r\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\r\n  //pa = padding, ba = border all sides, b = border, bg = background\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchBox);\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  children?: JSX.Element;\r\n};\r\n\r\nconst Scroll = (props: Props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"5px solid black\",\r\n        height: \"600px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import { Component } from \"react\";\r\nimport React from \"react\";\r\n\r\ninterface IAppProps {}\r\n\r\ninterface IState {\r\n  hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundry extends Component<IAppProps, IState> {\r\n  constructor(props: IAppProps) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h1>That is not good!</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <h1 className=\"f2\">Robofriends</h1>;\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport \"./MainPage.css\";\r\nimport Header from \"../components/Header\";\r\nimport { IRobot } from \"../types\";\r\nimport { AppProps } from \"../containers/App\";\r\n\r\n// export type IAppProps = {\r\n//   searchField: string;\r\n//   onSearchChange: (event: React.SyntheticEvent<HTMLInputElement>) => void;\r\n//   robots: Array<IRobot>;\r\n//   onRequestRobots: () => void;\r\n//   isPending: boolean;\r\n// };\r\n\r\nfunction MainPage(props: AppProps) {\r\n  const [filteredRobots, setFilteredRobots] = useState<Array<IRobot>>([]);\r\n  const {\r\n    searchField,\r\n    onSearchChange,\r\n    robots,\r\n    onRequestRobots,\r\n    isPending,\r\n  } = props;\r\n\r\n  console.log(props);\r\n\r\n  //componentDidMount\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, [robots.length]); //notice the empty array here\r\n\r\n  async function componentDidMount() {\r\n    if (robots.length === 0) onRequestRobots();\r\n    if (robots.length > 0) setFilteredRobots(robots);\r\n  }\r\n\r\n  function filterRobots(robots: IRobot[]) {\r\n    return robots.filter((robot: IRobot) =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (robots.length) {\r\n      setFilteredRobots(filterRobots(robots));\r\n    }\r\n  }, [searchField.length]);\r\n\r\n  //tc = text center\r\n  return isPending ? (\r\n    <h1>Loading...</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <Header />\r\n      <SearchBox searchChange={onSearchChange} />\r\n      <Scroll>\r\n        <ErrorBoundry>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundry>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { FC } from \"react\";\nimport \"../containers/App.css\";\nimport { setSearchField, requestRobots } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport MainPage from \"../components/MainPage\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { AppState } from \"../types\";\nimport { AnyAction } from \"redux\";\nimport { IRootState } from \"../index\";\n\n// interface IState {\n//   searchField: string;\n//   robots: Array<IRobot>;\n//   isPending: boolean;\n//   error: string;\n// }\n\ntype IPropsFromDispatch = {\n  onSearchChange: (\n    event: React.SyntheticEvent<HTMLInputElement>\n  ) => Promise<void>;\n  onRequestRobots: () => Promise<void>;\n};\n\n//interface IAppProps extends ReduxType, IPropsFromDispatch {}\n\nexport type AppProps = StateProps & IPropsFromDispatch;\n\nconst App: React.FC<AppProps> = (props) => {\n  return <MainPage {...props} />;\n};\n\nfunction mapStateToProps(state: AppState) {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n}\n\nfunction mapDispatchToProps(\n  dispatch: ThunkDispatch<IRootState, any, AnyAction>\n): IPropsFromDispatch {\n  return {\n    onSearchChange: (event: React.SyntheticEvent<HTMLInputElement>) =>\n      dispatch<any>(setSearchField(event.currentTarget.value)),\n    onRequestRobots: () => dispatch<any>(requestRobots()),\n  };\n}\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Constants } from \"./constants\";\r\nimport { IRobotState, RobotsAction } from \"./types\";\r\n\r\nconst initialState: IRobotState = {\r\n  isPending: false,\r\n  robots: [],\r\n  searchField: \"\",\r\n  error: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialState, action: any = {}) => {\r\n  switch (action.type) {\r\n    case Constants.CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (\r\n  state = initialState,\r\n  action: RobotsAction = {}\r\n) => {\r\n  switch (action.type) {\r\n    case Constants.REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case Constants.REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case Constants.REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport { IRobotState } from \"./types\";\n\nexport interface IRootState {\n  state: IRobotState;\n}\n\nconst logger = createLogger();\n//const rootReducer = combineReducers({ searchRobots, requestRobots });\n\n// const store = createStore<IRootState, any, any, any>(\n//   rootReducer,\n//   applyMiddleware(thunkMiddleware, logger)\n// );\n\nconst store = createStore(\n  combineReducers({\n    searchRobots,\n    requestRobots,\n  }),\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n//serviceWorker.unregister();\n"],"sourceRoot":""}